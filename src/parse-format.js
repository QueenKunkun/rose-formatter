// Generated by Peggy 1.2.0.
//
// https://peggyjs.org/
(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory();
  }
})(this, function() {
  "use strict";

  function peg$subclass(child, parent) {
    function C() { this.constructor = child; }
    C.prototype = parent.prototype;
    child.prototype = new C();
  }

  function peg$SyntaxError(message, expected, found, location) {
    var self = Error.call(this, message);
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(self, peg$SyntaxError.prototype);
    }
    self.expected = expected;
    self.found = found;
    self.location = location;
    self.name = "SyntaxError";
    return self;
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$padEnd(str, targetLength, padString) {
    padString = padString || " ";
    if (str.length > targetLength) { return str; }
    targetLength -= str.length;
    padString += padString.repeat(targetLength);
    return str + padString.slice(0, targetLength);
  }

  peg$SyntaxError.prototype.format = function(sources) {
    var str = "Error: " + this.message;
    if (this.location) {
      var src = null;
      var k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      var s = this.location.start;
      var loc = this.location.source + ":" + s.line + ":" + s.column;
      if (src) {
        var e = this.location.end;
        var filler = peg$padEnd("", s.line.toString().length);
        var line = src[s.line - 1];
        var last = s.line === e.line ? e.column : line.length + 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + s.line + " | " + line + "\n"
            + filler + " | " + peg$padEnd("", s.column - 1)
            + peg$padEnd("", last - s.column, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  };

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class: function(expectation) {
        var escapedParts = expectation.parts.map(function(part) {
          return Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part);
        });

        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
      },

      any: function() {
        return "any character";
      },

      end: function() {
        return "end of input";
      },

      other: function(expectation) {
        return expectation.description;
      }
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = expected.map(describeExpectation);
      var i, j;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== undefined ? options : {};

    var peg$FAILED = {};
    var peg$source = options.grammarSource;

    var peg$startRuleFunctions = { Main: peg$parseMain };
    var peg$startRuleFunction = peg$parseMain;

    var peg$c0 = ";";
    var peg$c1 = "[";
    var peg$c2 = "]";
    var peg$c3 = ",";
    var peg$c4 = ".";
    var peg$c5 = "<>";
    var peg$c6 = "<=";
    var peg$c7 = "<";
    var peg$c8 = ">=";
    var peg$c9 = ">";
    var peg$c10 = "=";
    var peg$c11 = "%";
    var peg$c12 = "e";
    var peg$c13 = "_";
    var peg$c14 = "\"";
    var peg$c15 = "\\";
    var peg$c16 = "*";
    var peg$c17 = "E";
    var peg$c18 = "/";
    var peg$c19 = "#";
    var peg$c20 = "0";
    var peg$c21 = "?";
    var peg$c22 = "dddd";
    var peg$c23 = "d";
    var peg$c24 = "aaaa";
    var peg$c25 = "a";
    var peg$c26 = "ddd";
    var peg$c27 = "aaa";
    var peg$c28 = "dd";
    var peg$c29 = "yyy";
    var peg$c30 = "y";
    var peg$c31 = "mm";
    var peg$c32 = "m";
    var peg$c33 = "h";
    var peg$c34 = "am/pm";
    var peg$c35 = "a/p";
    var peg$c36 = "s";

    var peg$r0 = /^[+\-]/;
    var peg$r1 = /^[0-9]/;
    var peg$r2 = /^[1-9]/;
    var peg$r3 = /^[^"]/;
    var peg$r4 = /^[ \t]/;
    var peg$r5 = /^[^E;0#?[\]\/]/i;

    var peg$e0 = peg$literalExpectation(";", false);
    var peg$e1 = peg$otherExpectation("decimal format token");
    var peg$e2 = peg$literalExpectation("[", false);
    var peg$e3 = peg$literalExpectation("]", false);
    var peg$e4 = peg$literalExpectation(",", false);
    var peg$e5 = peg$literalExpectation(".", false);
    var peg$e6 = peg$literalExpectation("<>", false);
    var peg$e7 = peg$literalExpectation("<=", false);
    var peg$e8 = peg$literalExpectation("<", false);
    var peg$e9 = peg$literalExpectation(">=", false);
    var peg$e10 = peg$literalExpectation(">", false);
    var peg$e11 = peg$literalExpectation("=", false);
    var peg$e12 = peg$literalExpectation("%", false);
    var peg$e13 = peg$classExpectation(["+", "-"], false, false);
    var peg$e14 = peg$classExpectation([["0", "9"]], false, false);
    var peg$e15 = peg$literalExpectation("e", true);
    var peg$e16 = peg$otherExpectation("integer-number");
    var peg$e17 = peg$classExpectation([["1", "9"]], false, false);
    var peg$e18 = peg$otherExpectation("hidden");
    var peg$e19 = peg$literalExpectation("_", false);
    var peg$e20 = peg$anyExpectation();
    var peg$e21 = peg$otherExpectation("literal");
    var peg$e22 = peg$otherExpectation("quoted-string");
    var peg$e23 = peg$literalExpectation("\"", false);
    var peg$e24 = peg$classExpectation(["\""], true, false);
    var peg$e25 = peg$otherExpectation("escaped-char");
    var peg$e26 = peg$literalExpectation("\\", false);
    var peg$e27 = peg$literalExpectation("*", false);
    var peg$e28 = peg$otherExpectation("space");
    var peg$e29 = peg$classExpectation([" ", "\t"], false, false);
    var peg$e30 = peg$otherExpectation("separator");
    var peg$e31 = peg$literalExpectation("E", false);
    var peg$e32 = peg$literalExpectation("/", false);
    var peg$e33 = peg$otherExpectation("unmapped-char");
    var peg$e34 = peg$classExpectation(["E", ";", "0", "#", "?", "[", "]", "/"], true, true);
    var peg$e35 = peg$otherExpectation("digit-mask");
    var peg$e36 = peg$literalExpectation("#", false);
    var peg$e37 = peg$literalExpectation("0", false);
    var peg$e38 = peg$literalExpectation("?", false);
    var peg$e39 = peg$literalExpectation("dddd", true);
    var peg$e40 = peg$literalExpectation("d", true);
    var peg$e41 = peg$literalExpectation("aaaa", true);
    var peg$e42 = peg$literalExpectation("a", false);
    var peg$e43 = peg$literalExpectation("ddd", true);
    var peg$e44 = peg$literalExpectation("aaa", false);
    var peg$e45 = peg$literalExpectation("dd", true);
    var peg$e46 = peg$literalExpectation("yyy", true);
    var peg$e47 = peg$literalExpectation("y", true);
    var peg$e48 = peg$literalExpectation("mm", false);
    var peg$e49 = peg$literalExpectation("m", true);
    var peg$e50 = peg$literalExpectation("mm", true);
    var peg$e51 = peg$literalExpectation("h", true);
    var peg$e52 = peg$literalExpectation("AM/PM", true);
    var peg$e53 = peg$literalExpectation("A/P", true);
    var peg$e54 = peg$literalExpectation("s", true);

    var peg$f0 = function(r, c) {return c};
    var peg$f1 = function(r, h) {
      return [r, ...h];
    };
    var peg$f2 = function(condition, format) {
      setFlags(format);
      return {condition, format}
    };
    var peg$f3 = function(mantissa, exponent) {
      return {mantissa, exponent, type:'scientific'}
    };
    var peg$f4 = function(int, fraction) {
      return {int, fraction, type: 'fraction'}
    };
    var peg$f5 = function(int, separator, decimal) {
      const parts = [...int.parts, ...decimal.parts] 
      const ans = {int, decimal, type: 'fixed'}
      countTrailingCommas(ans, parts)
      countPercentSymbols(ans, parts)
      return ans;
    };
    var peg$f6 = function(i) {
      return i || computeRange([])
    };
    var peg$f7 = function(int) {
      const ans = {int, type: 'integer'};
      countTrailingCommas(ans, int.parts)
      countPercentSymbols(ans, int.parts)
      return ans;
    };
    var peg$f8 = function(parts) {
      return computeRange(parts)
    };
    var peg$f9 = function(parts) {
      // Reject formats without a digit mask
      return parts.totalPositions >= 1
    };
    var peg$f10 = function(parts) {
      return nonEmpty(parts)
    };
    var peg$f11 = function(prefix, digits) {
      return nonEmpty(computeRange([...prefix, ...digits]))
    };
    var peg$f12 = function(compare, value) {
      return $({compare, value})
    };
    var peg$f13 = function() {return $({type:'literal', mask: ''})};
    var peg$f14 = function() {return $({type: 'literal', mask: '.'})};
    var peg$f15 = function() {return $({type:'literal', mask: ','})};
    var peg$f16 = function(s) {return Number(s)};
    var peg$f17 = function(n) {return parseInt(n)};
    var peg$f18 = function(mask) {return $({type: 'hidden',  mask})};
    var peg$f19 = function(mask) {
      return $(mask, 'literal')
    };
    var peg$f20 = function(literal) {return literal};
    var peg$f21 = function(mask) {
      return $(mask, 'fill')
    };
    var peg$f22 = function(d) {
      return $({type: 'separator', mask: d})
    };
    var peg$f23 = function(e, sign, mask) {
      nonEmpty(mask)
      return $({sign, mask}, 'exponent')
    };
    var peg$f24 = function(s) {return s};
    var peg$f25 = function(numerator, denominator) {
      return $({numerator, denominator: nonEmpty(computeRange(denominator))}, 'fraction')
    };
    var peg$f26 = function(numerator, denominator) {
      return $({numerator, denominator}, 'fixed-fraction')
    };
    var peg$f27 = function(mask) {return $({type: 'literal', mask})};
    var peg$f28 = function(mask) {
      return $({type: 'digit', mask})
    };
    var peg$f29 = function(f) {return {type: 'datetime', parts: resolveMonthOrMinutes(f)}};
    var peg$f30 = function(mask) {
      return $(mask.toLowerCase(), 'date')
    };
    var peg$f31 = function() {return options.undocumentedFeatures};
    var peg$f32 = function() {return 'dddd'};
    var peg$f33 = function() {return 'ddd'};
    var peg$f34 = function() {return 'yyyy'};
    var peg$f35 = function() {return 'yy'};
    var peg$f36 = function(x) {return x.substr(0,5)};
    var peg$f37 = function(mask) {return $(mask.toLowerCase(), 'datetime')};
    var peg$f38 = function(mask) {
      return $(mask.toLowerCase(), 'time')
    };
    var peg$f39 = function(x) {return x.substr(0,2)};
    var peg$f40 = function(x) {return $({mask:'.0', zfill: x.length-1}, 'time')};
    var peg$f41 = function() {return $({type:'literal',mask:','})};
    var peg$f42 = function() {return $({type: 'literal', mask:'/'})};
    var peg$f43 = function(x) {
      return $({type:'time', mask: '[' + x[0].toLowerCase() + ']', zfill: x.length})
    };

    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = 0;
    var peg$maxFailExpected = [];
    var peg$silentFails = 0;

    var peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function offset() {
      return peg$savedPos;
    }

    function range() {
      return {
        source: peg$source,
        start: peg$savedPos,
        end: peg$currPos
      };
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== undefined
        ? location
        : peg$computeLocation(peg$savedPos, peg$currPos);

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== undefined
        ? location
        : peg$computeLocation(peg$savedPos, peg$currPos);

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos];
      var p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line: details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;

        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos);
      var endPosDetails = peg$computePosDetails(endPos);

      return {
        source: peg$source,
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseMain() {
      var s0;

      s0 = peg$parseMultiFormat();

      return s0;
    }

    function peg$parseMultiFormat() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseConditionalFormat();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c0;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseConditionalFormat();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f0(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 59) {
            s4 = peg$c0;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseConditionalFormat();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f0(s1, s5);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f1(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConditionalFormat() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCondition();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseFormat();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFormat() {
      var s0;

      s0 = peg$parseScientificFormat();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFractionFormat();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFixedFormat();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIntegerFormat();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDateTimeFormat();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseScientificFormat() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseFixedFormat();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIntegerFormat();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExponent();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFractionFormat() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIntegerPartFormat();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = peg$parseFraction();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f4(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFixedFormat() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseOptionalIntegerPartFormat();
      s2 = peg$parseDecimalSeparator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDecimalPartFormat();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f5(s1, s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOptionalIntegerPartFormat() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseIntegerPartFormat();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      peg$savedPos = s0;
      s1 = peg$f6(s1);
      s0 = s1;

      return s0;
    }

    function peg$parseIntegerFormat() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseIntegerPartFormat();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f7(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIntegerPartFormat() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseFraction();
      if (s4 === peg$FAILED) {
        s4 = peg$parseExponent();
        if (s4 === peg$FAILED) {
          s4 = peg$parseDecimalSeparator();
        }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseIntegerFormatToken();
        if (s4 !== peg$FAILED) {
          s2 = s4;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseFraction();
          if (s4 === peg$FAILED) {
            s4 = peg$parseExponent();
            if (s4 === peg$FAILED) {
              s4 = peg$parseDecimalSeparator();
            }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = undefined;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIntegerFormatToken();
            if (s4 !== peg$FAILED) {
              s2 = s4;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f8(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNonEmptyIntegerPartFormat() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIntegerPartFormat();
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$f9(s1);
        if (s2) {
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f10(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIntegerFormatToken() {
      var s0;

      s0 = peg$parseTextContent();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDigitMask();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumericSeparator();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDigitGroup();
            if (s0 === peg$FAILED) {
              s0 = peg$parsePercent();
              if (s0 === peg$FAILED) {
                s0 = peg$parseUnrecognized();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseDecimalPartFormat() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseDecimalFormatToken();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseDecimalFormatToken();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f8(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDecimalFormatToken() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseTextContent();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDigitMask();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLiteralDot();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNumericSeparator();
            if (s0 === peg$FAILED) {
              s0 = peg$parseUnrecognized();
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }

      return s0;
    }

    function peg$parseNumeratorFormat() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseHiddenComma();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = [];
      s3 = peg$parseTextContent();
      if (s3 === peg$FAILED) {
        s3 = peg$parsePercent();
        if (s3 === peg$FAILED) {
          s3 = peg$parseLiteralComma();
          if (s3 === peg$FAILED) {
            s3 = peg$parseSpace();
          }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseTextContent();
        if (s3 === peg$FAILED) {
          s3 = peg$parsePercent();
          if (s3 === peg$FAILED) {
            s3 = peg$parseLiteralComma();
            if (s3 === peg$FAILED) {
              s3 = peg$parseSpace();
            }
          }
        }
      }
      s3 = [];
      s4 = peg$parseDigitMask();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDigitMask();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f11(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseCondition() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c1;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseComparator();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNumericConstant();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c2;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f12(s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseHiddenComma() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f13();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLiteralDot() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c4;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f14();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLiteralComma() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f15();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseComparator() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c5) {
        s0 = peg$c5;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c6) {
          s0 = peg$c6;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s0 = peg$c7;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c8) {
              s0 = peg$c8;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s0 = peg$c9;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e10); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s0 = peg$c10;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e11); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 37) {
                    s0 = peg$c11;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e12); }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNumericConstant() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c4;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
          }
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$currPos;
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c12) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s7 !== peg$FAILED) {
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = [];
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s10 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s10 !== peg$FAILED) {
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              if (peg$r1.test(input.charAt(peg$currPos))) {
                s10 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
            }
          } else {
            s9 = peg$FAILED;
          }
          if (s9 !== peg$FAILED) {
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s3 = [s3, s4, s5, s6];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f16(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIntegerConstant() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f17(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }

      return s0;
    }

    function peg$parseHidden() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 95) {
        s1 = peg$c13;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEscaped();
        if (s2 === peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f18(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }

      return s0;
    }

    function peg$parseTextContent() {
      var s0;

      s0 = peg$parseHidden();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFill();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLiteral();
        }
      }

      return s0;
    }

    function peg$parseLiteral() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseQuoted();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEscaped();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSpaces();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f19(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }

      return s0;
    }

    function peg$parseQuoted() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
        }
        s2 = input.substring(s2, peg$currPos);
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c14;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }

      return s0;
    }

    function peg$parseEscaped() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }

      return s0;
    }

    function peg$parseSpaces() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parseSpace();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 42) {
          s4 = peg$c16;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseSpace() {
      var s0, s1;

      peg$silentFails++;
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }

      return s0;
    }

    function peg$parseFill() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseQuoted();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEscaped();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSpace();
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNumericSeparator() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseDigitGroup();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDecimalSeparator();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePercent();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f22(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }

      return s0;
    }

    function peg$parseExponent() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 69) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r0.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIntegerPartFormat();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f23(s1, s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFraction() {
      var s0;

      s0 = peg$parseDeterminedDenominatorFraction();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUndeterminedFraction();
      }

      return s0;
    }

    function peg$parseFormattedInteger() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseIntegerPart();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseIntegerPart();
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIntegerPart() {
      var s0;

      s0 = peg$parseTextContent();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDigitMask();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnrecognized();
        }
      }

      return s0;
    }

    function peg$parseFracPart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c18;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIntegerPart();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f24(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUndeterminedFraction() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseNumeratorFormat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseFracPart();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseFracPart();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f25(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDeterminedDenominatorFraction() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseNumeratorFormat();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIntegerConstant();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f26(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseUnrecognized() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseTimeToken();
      if (s2 === peg$FAILED) {
        s2 = peg$parseDateToken();
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f27(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }

      return s0;
    }

    function peg$parseDigitMask() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c19;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c20;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 63) {
            s1 = peg$c21;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e38); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f28(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }

      return s0;
    }

    function peg$parseDigitGroup() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c3;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }

      return s0;
    }

    function peg$parseDecimalSeparator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c4;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }

      return s0;
    }

    function peg$parsePercent() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 37) {
        s0 = peg$c11;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }

      return s0;
    }

    function peg$parseDateTimeFormat() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 59) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseTextContent();
        if (s4 === peg$FAILED) {
          s4 = peg$parseDateTimeToken();
          if (s4 === peg$FAILED) {
            s4 = peg$parseEllapsedTime();
            if (s4 === peg$FAILED) {
              s4 = peg$parseDateTimeSeparator();
            }
          }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseTextContent();
            if (s4 === peg$FAILED) {
              s4 = peg$parseDateTimeToken();
              if (s4 === peg$FAILED) {
                s4 = peg$parseEllapsedTime();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseDateTimeSeparator();
                }
              }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s1 = s3;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f29(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDateTimeToken() {
      var s0;

      s0 = peg$parseDateToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTimeToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMonthOrMinutes();
        }
      }

      return s0;
    }

    function peg$parseDateToken() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseDay();
      if (s1 === peg$FAILED) {
        s1 = peg$parseYear();
        if (s1 === peg$FAILED) {
          s1 = peg$parseMonthName();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f30(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseMonthOrMinutes();
      }

      return s0;
    }

    function peg$parseDay() {
      var s0;

      s0 = peg$parseWeekDay();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMonthDay();
      }

      return s0;
    }

    function peg$parseWeekDay() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c22) {
        s2 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c23) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c23) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e40); }
          }
        }
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c24) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (input.charCodeAt(peg$currPos) === 97) {
            s4 = peg$c25;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (input.charCodeAt(peg$currPos) === 97) {
              s4 = peg$c25;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
          }
          peg$savedPos = peg$currPos;
          s4 = peg$f31();
          if (s4) {
            s4 = undefined;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f32();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c26) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c27) {
            s2 = peg$c27;
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e44); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s3 = peg$f31();
            if (s3) {
              s3 = undefined;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f33();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseMonthDay() {
      var s0;

      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c28) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c23) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
      }

      return s0;
    }

    function peg$parseYear() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c29) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c30) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c30) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e47); }
          }
        }
        peg$savedPos = s0;
        s0 = peg$f34();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c30) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c30) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e47); }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f35();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseMonthName() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c31) {
        s3 = peg$c31;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c32) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c32) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e49); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f36(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMonthOrMinutes() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c31) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c32) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f37(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTimeToken() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseHours();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSeconds();
        if (s1 === peg$FAILED) {
          s1 = peg$parseAMPM();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f38(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseMonthOrMinutes();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFractionOfSecond();
          if (s0 === peg$FAILED) {
            s0 = peg$parseEllapsedTime();
          }
        }
      }

      return s0;
    }

    function peg$parseHours() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c33) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c33) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e51); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f39(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAMPM() {
      var s0;

      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c34) {
        s0 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c35) {
          s0 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e53); }
        }
      }

      return s0;
    }

    function peg$parseSeconds() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c36) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c36) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e54); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f39(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFractionOfSecond() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (input.charCodeAt(peg$currPos) === 48) {
          s5 = peg$c20;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (input.charCodeAt(peg$currPos) === 48) {
              s5 = peg$c20;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e37); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f40(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDateTimeSeparator() {
      var s0;

      s0 = peg$parseCommas();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSlash();
        if (s0 === peg$FAILED) {
          s0 = peg$parseUnrecognized();
        }
      }

      return s0;
    }

    function peg$parseCommas() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c3;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c3;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f41();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSlash() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c18;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f42();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEllapsedTime() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c1;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c33) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c33) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e51); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = [];
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c32) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e49); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c32) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e49); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = [];
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c36) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e54); }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (input.substr(peg$currPos, 1).toLowerCase() === peg$c36) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e54); }
                }
              }
            } else {
              s3 = peg$FAILED;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c2;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f43(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }


      let trailingCommas = 0;
      let percentSymbols = 0;
      function $(s, type){
        if(typeof s !== 'object'){
          s = {mask: s}
        }
        if(type)s.type = type;
        s.source = {start:peg$savedPos, end: peg$currPos, text: text()};
        return s;
      }
      function resolveMonthOrMinutes(parts){
        // To disambiguate m, as minutes or as month
        let unresolved = null;
        let timeSeen = false;
        for(let i = 0; i < parts.length; ++i){
          switch(parts[i].type){
            case 'time':
              if(['am/pm', 'a/p'].includes(parts[i].mask)){
                continue;
              }
              timeSeen = true;
              if(unresolved && ['s', '.'].includes(parts[i].mask[0])){
                // m followed by s or fraction of second
                unresolved.type = 'time'
                unresolved = null;
              }
              break;
            case 'date':
              timeSeen = false;
              break;
            case 'datetime':
              if(unresolved){
                unresolved.type = 'date';
              }
              if(timeSeen){
                parts[i].type = 'time';
                timeSeen = false;
                unresolved = null;
              }else{
                unresolved = parts[i];
              }
              break
          }
        }
        if(unresolved){
          unresolved.type = 'date';
        }
        return parts;
      }
      function setFlags(format){
        format.isDate = false;
        format.percent = 0;
        format.clockHours = 24;
        for(const part of format.parts || []){
          if(part.type === 'date' || part.type === 'format'){
            format.isDate = true;
          }
          if(part.mask === 'am/pm' || part.mask === 'a/p'){
            format.clockHours = 12;
          }
        }
        return format;
      }

      function countPercentSymbols(f, parts){
        let numPercentSymbols = 0
        for(const part of parts){
          if(part.type === 'separator' && part.mask === '%'){
            ++numPercentSymbols
          }
        }
        f.numPercentSymbols = numPercentSymbols;
        return f;
      }
      function countTrailingCommas(f, parts){
        let trailingCommas = 0;
        let followsNumber = false;
        
        for(const part of parts){
          if(part.type === 'separator' && part.mask === ','){
            if(followsNumber){
              part.mask = ''
              f.thousandSeparator = options.thousandSeparator || ',';
              ++trailingCommas;
            }else{
              part.type = 'literal'
            }
          }else if(part.type === 'digit'){
            trailingCommas = 0;
            followsNumber = true;
          }else{
            followsNumber = false;
          }
        }
        f.numTrailingCommas = trailingCommas;
        return f;
      }

      function computeRange(parts){
        let firstReserved = null;
        let lastReserved = null;
        let totalPositions = 0
        for(let i = 0; i < parts.length; ++i){
          const part = parts[i]
          if(part && part.type && part.type === 'digit'){
            if(part.mask === '0'){
              if(firstReserved === null){
                firstReserved = totalPositions;
              }
              lastReserved = totalPositions;
            }
            ++totalPositions;
          }
        }
        return {parts, firstReserved, lastReserved, totalPositions}
      }
      function nonEmpty(format){
        if(format.firstReserved === null){
          format.firstReserved = format.totalPositions - 1;
        }
        return format;
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
});
