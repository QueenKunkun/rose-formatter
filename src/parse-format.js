// @generated by Peggy 5.0.6.
//
// https://peggyjs.org/
(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory();
  }
})(this, function() {
  "use strict";
class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message);
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";
  }

  format(sources) {
    let str = "Error: " + this.message;
    if (this.location) {
      let src = null;
      const st = sources.find(s => s.source === this.location.source);
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g);
      }
      const s = this.location.start;
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
        ? this.location.source.offset(s)
        : s;
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
      if (src) {
        const e = this.location.end;
        const filler = "".padEnd(offset_s.line.toString().length, " ");
        const line = src[s.line - 1];
        const last = s.line === e.line ? e.column : line.length + 1;
        const hatLen = (last - s.column) || 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + offset_s.line + " | " + line + "\n"
            + filler + " | " + "".padEnd(s.column - 1, " ")
            + "".padEnd(hatLen, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
      : null;
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
      return s;
    }

    function literalEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    function classEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class(expectation) {
        const escapedParts = expectation.parts.map(
          part => (Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part))
        );

        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

      any() {
        return "any character";
      },

      end() {
        return "end of input";
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation);
      descriptions.sort();

      if (descriptions.length > 0) {
        let j = 1;
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions = {
    Main: peg$parseMain,
  };
  let peg$startRuleFunction = peg$parseMain;

  const peg$c0 = ";";
  const peg$c1 = "[";
  const peg$c2 = "]";
  const peg$c3 = ",";
  const peg$c4 = ".";
  const peg$c5 = "<>";
  const peg$c6 = "<=";
  const peg$c7 = "<";
  const peg$c8 = ">=";
  const peg$c9 = "e";
  const peg$c10 = "_";
  const peg$c11 = "\"";
  const peg$c12 = "\\";
  const peg$c13 = "*";
  const peg$c14 = "E";
  const peg$c15 = "/";
  const peg$c16 = "%";
  const peg$c17 = "dddd";
  const peg$c18 = "d";
  const peg$c19 = "aaaa";
  const peg$c20 = "a";
  const peg$c21 = "ddd";
  const peg$c22 = "aaa";
  const peg$c23 = "dd";
  const peg$c24 = "yyy";
  const peg$c25 = "y";
  const peg$c26 = "mm";
  const peg$c27 = "m";
  const peg$c28 = "h";
  const peg$c29 = "am/pm";
  const peg$c30 = "a/p";
  const peg$c31 = "s";
  const peg$c32 = "0";

  const peg$r0 = /^[%,]/;
  const peg$r1 = /^[%=->]/;
  const peg$r2 = /^[+\-]/;
  const peg$r3 = /^[0-9]/;
  const peg$r4 = /^[1-9]/;
  const peg$r5 = /^[^"]/;
  const peg$r6 = /^[ \t]/;
  const peg$r7 = /^[%,.]/;
  const peg$r8 = /^[^E;0#?[\]\/]/i;
  const peg$r9 = /^[#0?]/;

  const peg$e0 = peg$literalExpectation(";", false);
  const peg$e1 = peg$classExpectation(["%", ","], false, false, false);
  const peg$e2 = peg$otherExpectation("decimal format token");
  const peg$e3 = peg$literalExpectation("[", false);
  const peg$e4 = peg$literalExpectation("]", false);
  const peg$e5 = peg$literalExpectation(",", false);
  const peg$e6 = peg$literalExpectation(".", false);
  const peg$e7 = peg$literalExpectation("<>", false);
  const peg$e8 = peg$literalExpectation("<=", false);
  const peg$e9 = peg$literalExpectation("<", false);
  const peg$e10 = peg$literalExpectation(">=", false);
  const peg$e11 = peg$classExpectation(["%", ["=", ">"]], false, false, false);
  const peg$e12 = peg$classExpectation(["+", "-"], false, false, false);
  const peg$e13 = peg$classExpectation([["0", "9"]], false, false, false);
  const peg$e14 = peg$literalExpectation("e", true);
  const peg$e15 = peg$otherExpectation("integer-number");
  const peg$e16 = peg$classExpectation([["1", "9"]], false, false, false);
  const peg$e17 = peg$otherExpectation("hidden");
  const peg$e18 = peg$literalExpectation("_", false);
  const peg$e19 = peg$anyExpectation();
  const peg$e20 = peg$otherExpectation("literal");
  const peg$e21 = peg$otherExpectation("quoted-string");
  const peg$e22 = peg$literalExpectation("\"", false);
  const peg$e23 = peg$classExpectation(["\""], true, false, false);
  const peg$e24 = peg$otherExpectation("escaped-char");
  const peg$e25 = peg$literalExpectation("\\", false);
  const peg$e26 = peg$literalExpectation("*", false);
  const peg$e27 = peg$otherExpectation("space");
  const peg$e28 = peg$classExpectation([" ", "\t"], false, false, false);
  const peg$e29 = peg$otherExpectation("separator");
  const peg$e30 = peg$classExpectation(["%", ",", "."], false, false, false);
  const peg$e31 = peg$literalExpectation("E", false);
  const peg$e32 = peg$literalExpectation("/", false);
  const peg$e33 = peg$otherExpectation("unmapped-char");
  const peg$e34 = peg$classExpectation(["E", ";", "0", "#", "?", "[", "]", "/"], true, true, false);
  const peg$e35 = peg$otherExpectation("digit-mask");
  const peg$e36 = peg$classExpectation(["#", "0", "?"], false, false, false);
  const peg$e37 = peg$literalExpectation("%", false);
  const peg$e38 = peg$literalExpectation("dddd", true);
  const peg$e39 = peg$literalExpectation("d", true);
  const peg$e40 = peg$literalExpectation("aaaa", true);
  const peg$e41 = peg$literalExpectation("a", false);
  const peg$e42 = peg$literalExpectation("ddd", true);
  const peg$e43 = peg$literalExpectation("aaa", false);
  const peg$e44 = peg$literalExpectation("dd", true);
  const peg$e45 = peg$literalExpectation("yyy", true);
  const peg$e46 = peg$literalExpectation("y", true);
  const peg$e47 = peg$literalExpectation("mm", false);
  const peg$e48 = peg$literalExpectation("m", true);
  const peg$e49 = peg$literalExpectation("mm", true);
  const peg$e50 = peg$literalExpectation("h", true);
  const peg$e51 = peg$literalExpectation("AM/PM", true);
  const peg$e52 = peg$literalExpectation("A/P", true);
  const peg$e53 = peg$literalExpectation("s", true);
  const peg$e54 = peg$literalExpectation("0", false);

  function peg$f0(r, c) {return c  }
  function peg$f1(r, h) {
    return [r, ...h];
  }
  function peg$f2(condition, format) {
    setFlags(format);
    return {condition, format}
  }
  function peg$f3(mantissa, exponent) {
    return {mantissa, exponent, type:'scientific'}
  }
  function peg$f4(int, fraction) {
    return {int, fraction, type: 'fraction'}
  }
  function peg$f5(int, separator, decimal) {
    const parts = [...int.parts, ...decimal.parts] 
    const ans = {int, decimal, type: 'fixed'}
    countTrailingCommas(ans, parts)
    countPercentSymbols(ans, parts)
    return ans;
  }
  function peg$f6(i) {
    return i || computeRange([])
  }
  function peg$f7(int) {
    const ans = {int, type: 'integer'};
    countTrailingCommas(ans, int.parts)
    countPercentSymbols(ans, int.parts)
    return ans;
  }
  function peg$f8(parts) {
    return computeRange(parts)
  }
  function peg$f9(parts) {
    return computeRange(parts)
  }
  function peg$f10(prefix, digits) {
    return nonEmpty(computeRange([...prefix, ...digits]))
  }
  function peg$f11(compare, value) {
    return $({compare, value})
  }
  function peg$f12() {return $({type:'literal', mask: ''})  }
  function peg$f13() {return $({type: 'literal', mask: '.'})  }
  function peg$f14() {return $({type:'literal', mask: ','})  }
  function peg$f15(s) {return Number(s)  }
  function peg$f16(n) {return parseInt(n)  }
  function peg$f17(mask) {return $({type: 'hidden',  mask})  }
  function peg$f18(mask) {
    return $(mask, 'literal')
  }
  function peg$f19(literal) {return literal  }
  function peg$f20(literal) {return literal  }
  function peg$f21(mask) {
    return $(mask, 'fill')
  }
  function peg$f22(d) {
    return $({type: 'separator', mask: d})
  }
  function peg$f23(e, sign, mask) {
    nonEmpty(mask)
    return $({sign, mask}, 'exponent')
  }
  function peg$f24(s) {return s  }
  function peg$f25(numerator, denominator) {
    return $({numerator, denominator: nonEmpty(computeRange(denominator))}, 'fraction')
  }
  function peg$f26(numerator, denominator) {
    return $({numerator, denominator}, 'fixed-fraction')
  }
  function peg$f27(mask) {return $({type: 'literal', mask})  }
  function peg$f28(mask) {
    return $({type: 'digit', mask})
  }
  function peg$f29(f) {return {type: 'datetime', parts: resolveMonthOrMinutes(f)}  }
  function peg$f30(mask) {
    return $(mask.toLowerCase(), 'date')
  }
  function peg$f31() {return options.undocumentedFeatures  }
  function peg$f32() {return 'dddd'  }
  function peg$f33() {return options.undocumentedFeatures  }
  function peg$f34() {return 'ddd'  }
  function peg$f35() {return 'yyyy'  }
  function peg$f36() {return 'yy'  }
  function peg$f37(x) {return x.substr(0,5)  }
  function peg$f38(mask) {return $(mask.toLowerCase(), 'datetime')  }
  function peg$f39(mask) {
    return $(mask.toLowerCase(), 'time')
  }
  function peg$f40(x) {return x.substr(0,2)  }
  function peg$f41(x) {return x.substr(0,2)  }
  function peg$f42(x) {return $({mask:'.0', zfill: x.length-1}, 'time')  }
  function peg$f43() {return $({type:'literal',mask:','})  }
  function peg$f44() {return $({type: 'literal', mask:'/'})  }
  function peg$f45(x) {
    return $({type:'time', mask: '[' + x[0].toLowerCase() + ']', zfill: x.length})
  }
  let peg$currPos = options.peg$currPos | 0;
  let peg$savedPos = peg$currPos;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = peg$currPos;
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
  let peg$silentFails = options.peg$silentFails | 0;

  let peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos);
    if (cp === undefined) {
      return "";
    }
    return String.fromCodePoint(cp);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text, ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description };
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseMain() {
    let s0;

    s0 = peg$parseMultiFormat();

    return s0;
  }

  function peg$parseMultiFormat() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseConditionalFormat();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseConditionalFormat();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f0(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c0;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseConditionalFormat();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f0(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f1(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConditionalFormat() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCondition();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseFormat();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f2(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFormat() {
    let s0;

    s0 = peg$parseScientificFormat();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFractionFormat();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFixedFormat();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIntegerFormat();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDateTimeFormat();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseScientificFormat() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseFixedFormat();
    if (s1 === peg$FAILED) {
      s1 = peg$parseIntegerFormat();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExponent();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f3(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFractionFormat() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseIntegerPartFormat();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseFraction();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f4(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFixedFormat() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseOptionalIntegerPartFormat();
    s2 = peg$parseDecimalSeparator();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDecimalPartFormat();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f5(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOptionalIntegerPartFormat() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIntegerPartFormat();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    peg$savedPos = s0;
    s1 = peg$f6(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseIntegerFormat() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseIntegerPartFormat();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIntegerPartFormat() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parseFraction();
    if (s4 === peg$FAILED) {
      s4 = peg$parseExponent();
      if (s4 === peg$FAILED) {
        s4 = peg$parseDecimalSeparator();
      }
    }
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseIntegerFormatToken();
      if (s4 !== peg$FAILED) {
        s2 = s4;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseFraction();
        if (s4 === peg$FAILED) {
          s4 = peg$parseExponent();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDecimalSeparator();
          }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIntegerFormatToken();
          if (s4 !== peg$FAILED) {
            s2 = s4;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f8(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIntegerFormatToken() {
    let s0;

    s0 = peg$parseTextContent();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDigitMask();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumericSeparator();
        if (s0 === peg$FAILED) {
          s0 = input.charAt(peg$currPos);
          if (peg$r0.test(s0)) {
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parseUnrecognized();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDecimalPartFormat() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDecimalFormatToken();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDecimalFormatToken();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDecimalFormatToken() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parseTextContent();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDigitMask();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteralDot();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumericSeparator();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUnrecognized();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseNumeratorFormat() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseHiddenComma();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = peg$parseTextContent();
    if (s3 === peg$FAILED) {
      s3 = peg$parsePercent();
      if (s3 === peg$FAILED) {
        s3 = peg$parseLiteralComma();
        if (s3 === peg$FAILED) {
          s3 = peg$parseSpace();
        }
      }
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseTextContent();
      if (s3 === peg$FAILED) {
        s3 = peg$parsePercent();
        if (s3 === peg$FAILED) {
          s3 = peg$parseLiteralComma();
          if (s3 === peg$FAILED) {
            s3 = peg$parseSpace();
          }
        }
      }
    }
    s3 = [];
    s4 = peg$parseDigitMask();
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseDigitMask();
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f10(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCondition() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseComparator();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNumericConstant();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f11(s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHiddenComma() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLiteralDot() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLiteralComma() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseComparator() {
    let s0;

    if (input.substr(peg$currPos, 2) === peg$c5) {
      s0 = peg$c5;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c6) {
        s0 = peg$c6;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 60) {
          s0 = peg$c7;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c8) {
            s0 = peg$c8;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s0 === peg$FAILED) {
            s0 = input.charAt(peg$currPos);
            if (peg$r1.test(s0)) {
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNumericConstant() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = input.charAt(peg$currPos);
    if (peg$r2.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = [];
    s5 = input.charAt(peg$currPos);
    if (peg$r3.test(s5)) {
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s5 !== peg$FAILED) {
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = input.charAt(peg$currPos);
        if (peg$r3.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
      }
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s6 = peg$c4;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s6 !== peg$FAILED) {
        s7 = [];
        s8 = input.charAt(peg$currPos);
        if (peg$r3.test(s8)) {
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = input.charAt(peg$currPos);
          if (peg$r3.test(s8)) {
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
        }
        s6 = [s6, s7];
        s5 = s6;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$currPos;
      s7 = input.charAt(peg$currPos);
      if (s7.toLowerCase() === peg$c9) {
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s7 !== peg$FAILED) {
        s8 = input.charAt(peg$currPos);
        if (peg$r2.test(s8)) {
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = [];
        s10 = input.charAt(peg$currPos);
        if (peg$r3.test(s10)) {
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s10 !== peg$FAILED) {
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = input.charAt(peg$currPos);
            if (peg$r3.test(s10)) {
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
          }
        } else {
          s9 = peg$FAILED;
        }
        if (s9 !== peg$FAILED) {
          s7 = [s7, s8, s9];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s3 = [s3, s4, s5, s6];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIntegerConstant() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = input.charAt(peg$currPos);
    if (peg$r4.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r3.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r3.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseHidden() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 95) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEscaped();
      if (s2 === peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f17(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parseTextContent() {
    let s0;

    s0 = peg$parseHidden();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFill();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteral();
      }
    }

    return s0;
  }

  function peg$parseLiteral() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseQuoted();
    if (s1 === peg$FAILED) {
      s1 = peg$parseEscaped();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSpaces();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parseQuoted() {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c11;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r5.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r5.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parseEscaped() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f20(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseSpaces() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseSpace();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSpace();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 42) {
        s4 = peg$c13;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseSpace() {
    let s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r6.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    return s0;
  }

  function peg$parseFill() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseQuoted();
    if (s1 === peg$FAILED) {
      s1 = peg$parseEscaped();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSpace();
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c13;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f21(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumericSeparator() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r7.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parseExponent() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 69) {
      s1 = peg$c14;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r2.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r2.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIntegerPartFormat();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f23(s1, s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFraction() {
    let s0;

    s0 = peg$parseDeterminedDenominatorFraction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseUndeterminedFraction();
    }

    return s0;
  }

  function peg$parseIntegerPart() {
    let s0;

    s0 = peg$parseTextContent();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDigitMask();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnrecognized();
      }
    }

    return s0;
  }

  function peg$parseFracPart() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 47) {
      s2 = peg$c15;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIntegerPart();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f24(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUndeterminedFraction() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNumeratorFormat();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c15;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseFracPart();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseFracPart();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f25(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDeterminedDenominatorFraction() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseNumeratorFormat();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c15;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIntegerConstant();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f26(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnrecognized() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseTimeToken();
    if (s2 === peg$FAILED) {
      s2 = peg$parseDateToken();
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r8.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f27(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

    return s0;
  }

  function peg$parseDigitMask() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r9.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f28(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parseDecimalSeparator() {
    let s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }

    return s0;
  }

  function peg$parsePercent() {
    let s0;

    if (input.charCodeAt(peg$currPos) === 37) {
      s0 = peg$c16;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }

  function peg$parseDateTimeFormat() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 59) {
      s3 = peg$c0;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    peg$silentFails--;
    if (s3 === peg$FAILED) {
      s2 = undefined;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseTextContent();
      if (s4 === peg$FAILED) {
        s4 = peg$parseDateTimeToken();
        if (s4 === peg$FAILED) {
          s4 = peg$parseEllapsedTime();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDateTimeSeparator();
          }
        }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseTextContent();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDateTimeToken();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEllapsedTime();
              if (s4 === peg$FAILED) {
                s4 = peg$parseDateTimeSeparator();
              }
            }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = s3;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f29(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDateTimeToken() {
    let s0;

    s0 = peg$parseDateToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTimeToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMonthOrMinutes();
      }
    }

    return s0;
  }

  function peg$parseDateToken() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseDay();
    if (s1 === peg$FAILED) {
      s1 = peg$parseYear();
      if (s1 === peg$FAILED) {
        s1 = peg$parseMonthName();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseMonthOrMinutes();
    }

    return s0;
  }

  function peg$parseDay() {
    let s0;

    s0 = peg$parseWeekDay();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMonthDay();
    }

    return s0;
  }

  function peg$parseWeekDay() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c17) {
      peg$currPos += (4);
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c18) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (s4.toLowerCase() === peg$c18) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c19) {
        peg$currPos += (4);
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (input.charCodeAt(peg$currPos) === 97) {
          s4 = peg$c20;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (input.charCodeAt(peg$currPos) === 97) {
            s4 = peg$c20;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
        }
        peg$savedPos = peg$currPos;
        s4 = peg$f31();
        if (s4) {
          s4 = undefined;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f32();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 3);
      if (s1.toLowerCase() === peg$c21) {
        peg$currPos += (3);
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c22) {
          s2 = peg$c22;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s3 = peg$f33();
          if (s3) {
            s3 = undefined;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f34();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseMonthDay() {
    let s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c23) {
      peg$currPos += (2);
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.charAt(peg$currPos);
      if (s0.toLowerCase() === peg$c18) {
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
    }

    return s0;
  }

  function peg$parseYear() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c24) {
      peg$currPos += (3);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c25) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (s3.toLowerCase() === peg$c25) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f35();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = input.charAt(peg$currPos);
      if (s2.toLowerCase() === peg$c25) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = input.charAt(peg$currPos);
          if (s2.toLowerCase() === peg$c25) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e46); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f36();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseMonthName() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c26) {
      s3 = peg$c26;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (s5.toLowerCase() === peg$c27) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (s5.toLowerCase() === peg$c27) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f37(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMonthOrMinutes() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c26) {
      peg$currPos += (2);
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s1 === peg$FAILED) {
      s1 = input.charAt(peg$currPos);
      if (s1.toLowerCase() === peg$c27) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f38(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTimeToken() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseHours();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSeconds();
      if (s1 === peg$FAILED) {
        s1 = peg$parseAMPM();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseMonthOrMinutes();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFractionOfSecond();
        if (s0 === peg$FAILED) {
          s0 = peg$parseEllapsedTime();
        }
      }
    }

    return s0;
  }

  function peg$parseHours() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (s3.toLowerCase() === peg$c28) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (s3.toLowerCase() === peg$c28) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e50); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAMPM() {
    let s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c29) {
      peg$currPos += (5);
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s0 === peg$FAILED) {
      s0 = input.substr(peg$currPos, 3);
      if (s0.toLowerCase() === peg$c30) {
        peg$currPos += (3);
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
    }

    return s0;
  }

  function peg$parseSeconds() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (s3.toLowerCase() === peg$c31) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (s3.toLowerCase() === peg$c31) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e53); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFractionOfSecond() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s3 = peg$c4;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      if (input.charCodeAt(peg$currPos) === 48) {
        s5 = peg$c32;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (input.charCodeAt(peg$currPos) === 48) {
            s5 = peg$c32;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e54); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDateTimeSeparator() {
    let s0;

    s0 = peg$parseCommas();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSlash();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnrecognized();
      }
    }

    return s0;
  }

  function peg$parseCommas() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c3;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c3;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f43();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSlash() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f44();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEllapsedTime() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c28) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (s4.toLowerCase() === peg$c28) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (s4.toLowerCase() === peg$c27) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e48); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = input.charAt(peg$currPos);
            if (s4.toLowerCase() === peg$c27) {
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e48); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = [];
          s4 = input.charAt(peg$currPos);
          if (s4.toLowerCase() === peg$c31) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = input.charAt(peg$currPos);
              if (s4.toLowerCase() === peg$c31) {
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e53); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f45(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


  let trailingCommas = 0;
  let percentSymbols = 0;
  function $(s, type){
    if(typeof s !== 'object'){
      s = {mask: s}
    }
    if(type)s.type = type;
    s.source = {start:peg$savedPos, end: peg$currPos, text: text()};
    return s;
  }
  function resolveMonthOrMinutes(parts){
    // To disambiguate m, as minutes or as month
    let unresolved = null;
    let timeSeen = false;
    for(let i = 0; i < parts.length; ++i){
      switch(parts[i].type){
        case 'time':
          if(['am/pm', 'a/p'].includes(parts[i].mask)){
            continue;
          }
          timeSeen = true;
          if(unresolved && ['s', '.'].includes(parts[i].mask[0])){
            // m followed by s or fraction of second
            unresolved.type = 'time'
            unresolved = null;
          }
          break;
        case 'date':
          timeSeen = false;
          break;
        case 'datetime':
          if(unresolved){
            unresolved.type = 'date';
          }
          if(timeSeen){
            parts[i].type = 'time';
            timeSeen = false;
            unresolved = null;
          }else{
            unresolved = parts[i];
          }
          break
      }
    }
    if(unresolved){
      unresolved.type = 'date';
    }
    return parts;
  }
  function setFlags(format){
    format.isDate = false;
    format.percent = 0;
    format.clockHours = 24;
    for(const part of format.parts || []){
      if(part.type === 'date' || part.type === 'format'){
        format.isDate = true;
      }
      if(part.mask === 'am/pm' || part.mask === 'a/p'){
        format.clockHours = 12;
      }
    }
    return format;
  }

  function countPercentSymbols(f, parts){
    let numPercentSymbols = 0
    for(const part of parts){
      if(part.type === 'separator' && part.mask === '%'){
        ++numPercentSymbols
      }
    }
    f.numPercentSymbols = numPercentSymbols;
    return f;
  }
  function countTrailingCommas(f, parts){
    let trailingCommas = 0;
    let followsNumber = false;
    
    for(const part of parts){
      if(part.type === 'separator' && part.mask === ','){
        if(followsNumber){
          part.mask = ''
          f.thousandSeparator = options.thousandSeparator || ',';
          ++trailingCommas;
        }else{
          part.type = 'literal'
        }
      }else if(part.type === 'digit'){
        trailingCommas = 0;
        followsNumber = true;
      }else{
        followsNumber = false;
      }
    }
    f.numTrailingCommas = trailingCommas;
    return f;
  }

  function computeRange(parts){
    let firstReserved = null;
    let lastReserved = null;
    let totalPositions = 0
    for(let i = 0; i < parts.length; ++i){
      const part = parts[i]
      if(part && part.type && part.type === 'digit'){
        if(part.mask === '0'){
          if(firstReserved === null){
            firstReserved = totalPositions;
          }
          lastReserved = totalPositions;
        }
        ++totalPositions;
      }
    }
    return {parts, firstReserved, lastReserved, totalPositions}
  }
  function nonEmpty(format){
    if(format.firstReserved === null){
      format.firstReserved = format.totalPositions - 1;
    }
    return format;
  }

  peg$result = peg$startRuleFunction();

  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
  if (peg$success) {
    return peg$result;
  } else {
    peg$throw();
  }
}

  return {
    StartRules: ["Main"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse,
  };
});
